/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dda.silabo.pdf;

import com.google.gson.Gson;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.sun.org.apache.bcel.internal.generic.AALOAD;
import dda.silabo.bibliografias.comunes.BibliografiaLibro;
import dda.silabo.bibliografias.comunes.BibliografiaSitioWeb;
import dda.silabo.estructura.unidad.actividades.comunes.Actividad;
import dda.silabo.estructura.unidad.actividades.comunes.Actividades;
import dda.silabo.bibliografias.iu.BibliografiasIU;
import dda.silabo.datosdocentes.comunes.DatoDocente;
import dda.silabo.datosgenerales.comunes.DatosGenerales;
import dda.silabo.estructura.unidad.estrategias.comunes.Estrategia;
import dda.silabo.estructura.unidad.recursos.comunes.Recursos;
import dda.silabo.criteriosevaluaciones.comunes.ActividadEvaluar;
import dda.silabo.criteriosevaluaciones.comunes.Aporte;
import dda.silabo.criteriosevaluaciones.iu.CriteriosEvaluacionesIU;
import dda.silabo.datosdocentes.comunes.Titulos;
import dda.silabo.datosdocentes.iu.DatosDocentesIU;
import dda.silabo.escenarios.comunes.Escenario;
import dda.silabo.escenarios.iu.EscenariosIU;
import dda.silabo.estructura.unidad.estrategias.iu.EstrategiasMetodologicasIU;
import dda.silabo.estructura.unidad.info.iu.InformacionUnidadIU;
import dda.silabo.estructura.unidad.logros.comunes.Logro;
import dda.silabo.estructura.unidadinformacion.comunes.Subtemas;
import dda.silabo.estructura.unidadinformacion.comunes.Unidades;
import dda.silabo.estructura.unidadinformacion.comunes.Temas;
import dda.silabo.estructura.unidad.logros.iu.LogrosIU;
import dda.silabo.estructura.unidad.objetivos.comunes.Objetivo;
import dda.silabo.estructura.unidad.objetivos.iu.ObjetivosIU;
import dda.silabo.parametros.comunes.Parametro;
import dda.silabo.silabo.comunes.Silabo;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Base64;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.script.Invocable;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

/**
 *
 * @author AdoveWeb
 */
public class SilaboVigente {

    /**
     * Creates new form Principal
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     *
     * @param paPDF
     * @param jsonAsignaturaInfo
     * @param silaboPDF
     * @param docentes
     * @param IdSilabo
     * @throws javax.script.ScriptException
     */
    public String generarPDF(String jsonAsignaturaInfo, byte[] silaboPDF, Integer IdSilabo, DatosDocentesIU docentes, DatosDocentesIU Todosdocentes) throws ScriptException, NoSuchMethodException {
        String resultado = "";
        Gson G = new Gson();
        Font zapfdibats = new Font(Font.FontFamily.ZAPFDINGBATS, 6);
        Chunk bullet1 = new Chunk(String.valueOf((char) 108), zapfdibats);
        ByteArrayOutputStream archivo = new ByteArrayOutputStream();

        if (silaboPDF == null && IdSilabo != 0) {
            Silabo silabo = G.fromJson(jsonAsignaturaInfo, Silabo.class);
            try {
                Document doc = new Document(PageSize.A4);
                doc.setMargins(40, 40, 30, 30);
                PdfWriter write = PdfWriter.getInstance(doc, archivo);
                doc.open();
                Font fuenteTitulo = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLDITALIC);
                Font fuenteTitulo2 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLDITALIC);
                Font fuenteSubTitulo = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD);
////////////////////////////////////////////////////HEADER////////////////////////////////////   
                PdfPTable header = new PdfPTable(3);
                header.setWidthPercentage(100f);
                PdfPCell espoch = new PdfPCell();
                byte[] logoEspoch = null;
                String fotoEspoch = logoEntidad("ESPOCH", "Instituto");
                if ((fotoEspoch != null)) {
                    logoEspoch = Base64.getDecoder().decode(fotoEspoch);
                    Image imgespoch = Image.getInstance(logoEspoch);
//                Image imgespoch = Image.getInstance("C:\\Pictures\\PDF\\logo.png");
                    imgespoch.scaleToFit(60, 60);
                    espoch.setVerticalAlignment(Element.ALIGN_CENTER);
                    espoch.setHorizontalAlignment(Element.ALIGN_CENTER);
                    espoch.addElement(imgespoch);
                } else {
                    espoch.addElement(new Paragraph("Logo no Disponible"));
                }

                espoch.setBorder(0);
//                PdfPCell titulo = new PdfPCell(new Paragraph("ESCUELA SUPERIOR POLITÉCNICA DE CHIMBORAZO" + "\n" + "" + "\n" + "", fuenteTitulo));
                Paragraph p = new Paragraph();
                p.add(new Phrase("ESCUELA SUPERIOR POLITÉCNICA DE CHIMBORAZO\n", fuenteTitulo));
                p.add(new Paragraph("VICERRECTORADO ACADEMICO" + "\n" + "DIRECCIÓN DE DESARROLLO ACADÉMICO", fuenteTitulo2));

                PdfPCell titulo = new PdfPCell(p);

                titulo.setVerticalAlignment(Element.ALIGN_CENTER);
                titulo.setHorizontalAlignment(Element.ALIGN_CENTER);
                titulo.setBorder(0);
                PdfPTable pw = new PdfPTable(1);

                pw.addCell(titulo);

                PdfPCell facultad = new PdfPCell();
                byte[] logofacultad = null;
                String fotoFacultad = logoEntidad(silabo.getCodCarrera(), "Carrera");
                if ((fotoFacultad != null)) {
                    logofacultad = Base64.getDecoder().decode(fotoFacultad);
                    Image imgfacultad = Image.getInstance(logofacultad);
//                Image imgfacultad = Image.getInstance("C:\\Pictures\\PDF\\fie.png");
                    imgfacultad.scaleToFit(80, 80);
                    facultad.setVerticalAlignment(Element.ALIGN_CENTER);
                    facultad.setHorizontalAlignment(Element.ALIGN_CENTER);
                    facultad.addElement(imgfacultad);
                } else {
                    facultad.addElement(new Paragraph("Logo no Disponible"));
                }

                facultad.setBorder(0);
                header.addCell(espoch);
                header.addCell(titulo);
                header.addCell(facultad);
                float[] header1 = {0.3f, 1.2f, 0.3f};
                header.setWidths(header1);
                doc.add(header);

///////////////////////////////////////////FOOTER/////////////////////////////////////////////////////////
                Font fontfooter = new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD, BaseColor.DARK_GRAY);
                PdfPTable tfooter = new PdfPTable(3);
                PdfPCell cell1 = new PdfPCell(new Paragraph("Direccion:Panamericana Sur km 1 ½.", fontfooter));
                cell1.setVerticalAlignment(Element.ALIGN_CENTER);
                cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell1.setBorder(0);
                PdfPCell cell2 = new PdfPCell(new Paragraph("Telefono:593 (03) 2 998 – 200  Ext. 247-454" + "\n" + "www.espoch.edu.ec", fontfooter));
                cell2.setVerticalAlignment(Element.ALIGN_CENTER);
                cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell2.setBorder(0);
                PdfPCell cell3 = new PdfPCell(new Paragraph("Codigo Postal:EC060155" + "\n" + "Riobamba - Ecuador", fontfooter));;
                cell3.setVerticalAlignment(Element.ALIGN_CENTER);
                cell3.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell3.setBorder(0);
                tfooter.addCell(cell1);
                tfooter.addCell(cell2);
                tfooter.addCell(cell3);
                tfooter.setTotalWidth(400);
                FooterPaginaItext event = new FooterPaginaItext(tfooter);
                event.onEndPage(write, doc);  //Colocar en la primera pagina
                doc.setPageSize(PageSize.A4);
                doc.addAuthor("Silabos");

/////////////////////////////////////////////////////////////////////////////////////////////////            
                doc.add(new Paragraph("\n"));
                Paragraph titulo1 = new Paragraph(" SÍLABO", fuenteSubTitulo);
                titulo1.setAlignment(titulo1.ALIGN_CENTER);

                doc.add(new Paragraph(titulo1));
                doc.add(new Paragraph("\n"));
                Paragraph titulosSecciones = new Paragraph();
//                titulosSecciones.add(bullet1);
                titulosSecciones.add(new Phrase("1.  Datos generales y específicos de la asignatura", obtenerfuentePDF("tituloSeccion")));
                doc.add(titulosSecciones);
                doc.add(new Paragraph("\n"));
///////////////////////////////////////////DATOS GENERALES DE ASIGNATURA //////////////////////////////////////////////////////////////
                String strDatosGenerales = datosGeneralesCargar(jsonAsignaturaInfo);
                DatosGenerales datosG = new Gson().fromJson(strDatosGenerales, DatosGenerales.class);
                doc.add(tablaDatosGenerales(datosG));
/////////////////////////////////////////////////////////////////////////////////////////////////
                doc.setPageSize(PageSize.A4.rotate());
                doc.newPage();
///////////////////////////////////////////////////////SECCION ESTRUCTURA Y DESARROLLO/////////////////////////////////////////////////////////////////////////////////////
                titulosSecciones = new Paragraph();
//                titulosSecciones.add(bullet1);
                titulosSecciones.add(new Phrase("2.  Estructura y Desarrollo de la asignatura", obtenerfuentePDF("tituloSeccion")));
                doc.add(titulosSecciones);
                doc.add(new Paragraph("\n"));
                silabo.setIdSilabo(IdSilabo);
                Integer NumUnidades = numUnidadesCargar(G.toJson(silabo));
                if (NumUnidades > 0) {
                    for (Integer und = 0; und < NumUnidades; und++) {
///////////////////////////////////////////ESTRATEGIASMETODOLOGICAS//////////////////////////////
                        doc.add(tablaEstructuraDesarrollo(und, IdSilabo, jsonAsignaturaInfo));
                        if (und == (NumUnidades - 1)) {
                            doc.setPageSize(PageSize.A4);
                        }
                        doc.newPage();

                    }
                } else {
                    doc.add(new Paragraph("Contenido no disponible"));

                }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////ESCENARIOS DE APRENDIAZJE///////////////////////////////////////////////////////////////////////
                doc.newPage();
                titulosSecciones = new Paragraph();
//                titulosSecciones.add(bullet1);
                titulosSecciones.add(new Phrase("3.  Escenario de aprendizaje", obtenerfuentePDF("tituloSeccion")));
                doc.add(titulosSecciones);

                doc.add(new Paragraph("\n"));
                doc.add(tablaEscenariosAprendizaje(IdSilabo));

//
//            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                doc.add(new Paragraph("\n"));
                titulosSecciones = new Paragraph();
//                titulosSecciones.add(bullet1);
                titulosSecciones.add(new Phrase("4.  Criterios normativos para la evaluación de la asignatura", obtenerfuentePDF("tituloSeccion")));
                doc.add(titulosSecciones);
                doc.add(new Paragraph("\n"));
                doc.add(tablaCriteriosEvaluacion(IdSilabo));
                doc.add(new Paragraph("\n"));

///////////////////////////////////////////////////////BIBLIOGRAFIA BASICA Y COMPLEMENTARIA ///////////////////////////////////////////////////////
                titulosSecciones = new Paragraph();
//                titulosSecciones.add(bullet1);
                titulosSecciones.add(new Phrase("5.  Bibliografía básica y complementaria", obtenerfuentePDF("tituloSeccion")));
                doc.add(titulosSecciones);
                doc.add(new Paragraph("\n"));
                doc.add(tablaBibliografia(IdSilabo));
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                doc.add(new Paragraph("\n"));
                titulosSecciones = new Paragraph();
//                titulosSecciones.add(bullet1);
                titulosSecciones.add(new Phrase("6.  Perfil del profesor que imparte la asignatura", obtenerfuentePDF("tituloSeccion")));
                doc.add(titulosSecciones);

                doc.add(new Paragraph("\n"));
//                String jsonDatosDocentes = datosDocentesCargar(jsonAsignaturaInfo);
//                DatosDocentesIU docentes = new Gson().fromJson(jsonDatosDocentes, DatosDocentesIU.class);
                doc.add(tablaInformacionDocentes(docentes, Todosdocentes));
                doc.newPage();
                doc.add(new Paragraph("\n"));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////FIRMA rESPONSABLES ///////////////////////////////////////////////////////
                doc.add(tablaFirmaResponsables(docentes, datosG.getCodigoCampo(), silabo));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //ANADIMOS UNA CELDA VACIA 

                doc.add(new Paragraph("\n"));
                doc.add(new Paragraph("\n"));
                //////////////////////////////////////////////////////////////PARAMETROS SILABO///////////////////////////////////////////////////////
                doc.add(tablaParametrosSilabo());
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                doc.close();

            } catch (DocumentException | IOException e) {
            }
        } else if (silaboPDF != null) {
            try {
                archivo.write(silaboPDF);
                archivo.close();

            } catch (IOException e) {

            }
        }
        byte[] pdfBytes = archivo.toByteArray();
        String base64Encoded = Base64.getEncoder().encodeToString(pdfBytes);
        resultado = base64Encoded;
        return resultado;
    }

    public Font obtenerfuentePDF(String tipo) {
        Font result = new Font();
        ////////////////////////////////////////////////////HEADER////////////////////////////////////   
        if (tipo.equals("institucionFuente")) {
            Font institucionFuente = new Font();
            institucionFuente.setFamily("Segoe UI");
            institucionFuente.setSize(12);
            institucionFuente.setStyle(Font.BOLD);
            result = institucionFuente;
        }
        if (tipo.equals("tituloSilabo")) {
            Font tituloSilabo = new Font();
            tituloSilabo.setFamily("Segoe UI");
            tituloSilabo.setSize(17);
            tituloSilabo.setStyle(Font.BOLD);
            result = tituloSilabo;
        }
        if (tipo.equals("tituloSeccion")) {
            Font tituloSeccion = new Font();
            tituloSeccion.setFamily("Segoe UI");
            tituloSeccion.setSize(13);
            tituloSeccion.setStyle(Font.BOLD);
            result = tituloSeccion;
        }
        if (tipo.equals("tituloTabla")) {
            Font tituloTablas = new Font();
            tituloTablas.setFamily("Segoe UI");
            tituloTablas.setSize(11);
            tituloTablas.setStyle(Font.BOLD);
            result = tituloTablas;
        }
        if (tipo.equals("contenidoFirmas")) {
            Font tituloTablas = new Font();
            tituloTablas.setFamily("Segoe UI");
            tituloTablas.setSize(9);
            tituloTablas.setStyle(Font.BOLD);
            result = tituloTablas;
        }
        if (tipo.equals("contenidoTabla")) {
            Font contenidoTabla = new Font();
            contenidoTabla.setFamily("Segoe UI");
            contenidoTabla.setSize(11);
            result = contenidoTabla;
        }
        if (tipo.equals("contenidoTablaTitulo")) {
            Font contenidoTablaTitulo = new Font();
            contenidoTablaTitulo.setFamily("Segoe UI");
            contenidoTablaTitulo.setSize(11);
            contenidoTablaTitulo.setStyle(Font.BOLD);
            result = contenidoTablaTitulo;
        }
        return result;
    }

    private static String datosGeneralesCargar(java.lang.String arg0) {
        dda.silabo.sw.SilaboSW_Service service = new dda.silabo.sw.SilaboSW_Service();
        dda.silabo.sw.SilaboSW port = service.getSilaboSWPort();
        return port.datosGeneralesCargar(arg0);
    }

    private static Integer numUnidadesCargar(java.lang.String arg0) {
        dda.silabo.sw.SilaboSW_Service service = new dda.silabo.sw.SilaboSW_Service();
        dda.silabo.sw.SilaboSW port = service.getSilaboSWPort();
        return port.numUnidadesCargar(arg0);
    }

    private static String estrategiasCargar(java.lang.String arg0) {
        dda.silabo.sw.SilaboSW_Service service = new dda.silabo.sw.SilaboSW_Service();
        dda.silabo.sw.SilaboSW port = service.getSilaboSWPort();
        return port.estrategiasCargar(arg0);
    }

    private static String recursosCargar(java.lang.String arg0) {
        dda.silabo.sw.SilaboSW_Service service = new dda.silabo.sw.SilaboSW_Service();
        dda.silabo.sw.SilaboSW port = service.getSilaboSWPort();
        return port.recursosCargar(arg0);
    }

    private static String actividadesAprendizajeCargar(java.lang.String arg0) {
        dda.silabo.sw.SilaboSW_Service service = new dda.silabo.sw.SilaboSW_Service();
        dda.silabo.sw.SilaboSW port = service.getSilaboSWPort();
        return port.actividadesAprendizajeCargar(arg0);
    }

    private static String unidadInformacionCargar(java.lang.String arg0) {
        dda.silabo.sw.SilaboSW_Service service = new dda.silabo.sw.SilaboSW_Service();
        dda.silabo.sw.SilaboSW port = service.getSilaboSWPort();
        return port.unidadInformacionCargar(arg0);
    }

    private static String logroCargar(java.lang.String arg0) {
        dda.silabo.sw.SilaboSW_Service service = new dda.silabo.sw.SilaboSW_Service();
        dda.silabo.sw.SilaboSW port = service.getSilaboSWPort();
        return port.logroCargar(arg0);
    }

    private static String objetivoCargar(java.lang.String arg0) {
        dda.silabo.sw.SilaboSW_Service service = new dda.silabo.sw.SilaboSW_Service();
        dda.silabo.sw.SilaboSW port = service.getSilaboSWPort();
        return port.objetivoCargar(arg0);
    }

    private static String escenariosCargar(java.lang.String arg0) {
        dda.silabo.sw.SilaboSW_Service service = new dda.silabo.sw.SilaboSW_Service();
        dda.silabo.sw.SilaboSW port = service.getSilaboSWPort();
        return port.escenariosCargar(arg0);
    }

    private static String evaluacionesCargar(java.lang.String arg0) {
        dda.silabo.sw.SilaboSW_Service service = new dda.silabo.sw.SilaboSW_Service();
        dda.silabo.sw.SilaboSW port = service.getSilaboSWPort();
        return port.evaluacionesCargar(arg0);
    }

    private static String bibliografiasCargar(java.lang.String arg0) {
        dda.silabo.sw.SilaboSW_Service service = new dda.silabo.sw.SilaboSW_Service();
        dda.silabo.sw.SilaboSW port = service.getSilaboSWPort();
        return port.bibliografiasCargar(arg0);
    }

    private static String datosDocentesCargar(java.lang.String arg0) {
        dda.silabo.sw.SilaboSW_Service service = new dda.silabo.sw.SilaboSW_Service();
        dda.silabo.sw.SilaboSW port = service.getSilaboSWPort();
        return port.datosDocentesCargar(arg0);
    }

    private static String parametroSilaboCargar(java.lang.Integer arg0) {
        dda.silabo.sw.SilaboSW_Service service = new dda.silabo.sw.SilaboSW_Service();
        dda.silabo.sw.SilaboSW port = service.getSilaboSWPort();
        return port.parametroSilaboCargar(arg0);
    }

    private static String autoridadesSilaboCargar(java.lang.String arg0) {
        dda.silabo.sw.SilaboSW_Service service = new dda.silabo.sw.SilaboSW_Service();
        dda.silabo.sw.SilaboSW port = service.getSilaboSWPort();
        return port.autoridadesSilaboCargar(arg0);
    }

    public String bibliografiasAPASitio(BibliografiaSitioWeb bs) {
        String result = "";
        result += obtenerAutorAPA(bs.getAutor());
        if (!result.equals("")) {
            result += ".";
        }
        result += "(";
        if (bs.getDia() != 0) {
            result += bs.getDia() + " de ";
        }
        result += bs.getMes();
        if (bs.getAnio() != 0) {
            result += " de " + bs.getAnio();
        }
        result += ")";
        if (!bs.getNombreSitio().equals("")) {
            result += "." + bs.getNombreSitio() + ".";
        }
        if (!bs.getUrl().equals("")) {
            result += " Obtenido de " + bs.getUrl();
        }
        return result;
    }

    public String bibliografiasAPAlibro(BibliografiaLibro bl) {
        String result = "";
        SilaboVigente s = new SilaboVigente();
        result += s.obtenerAutorAPA(bl.getAutor());
        if (bl.getAnio() != 0) {
            result += ".(" + bl.getAnio() + "). ";
        }
        result += bl.getTitulo() + ". " + bl.getCiudad();
        if (!bl.getEditorial().equals("")) {
            result += ": " + bl.getEditorial();
        }
        return result;
    }

    public String obtenerAutorAPA(String autor) {
        String result = "";
        if (autor.contains(",")) {
            String[] arrayAutor = autor.split(" ");
            Integer size = arrayAutor.length;
            String autorF = "";
            for (int i = 0; i < size; i++) {
                String resultado = arrayAutor[i];
                boolean c1 = resultado.contains(";");
                boolean c2 = resultado.contains(",");
                if ((c1 && !c2) || (!c1 && !c2)) {
                    autorF += arrayAutor[i - 1];
                    autorF += " ";
                    autorF += arrayAutor[i].substring(0, 1);
                    autorF += ".";
                }
                if ((size - i) % 2 == 0 && i != 0) {
                    autorF += ", & ";
                }
            }
            result = autorF;
        } else if (!autor.contains(",") && !autor.contains(";")) {
            String[] arrayAutor = autor.split(" ");
            Integer size = arrayAutor.length;
            String autorF = "";
            for (int i = 0; i < size; i++) {
                if ((size - (i + 1)) % 2 == 0 && i != 0) {
                    autorF += arrayAutor[i - 1];
                    autorF += ", ";
                    autorF += arrayAutor[i].substring(0, 1);
                    autorF += ".";
                    if ((i + 1) < size) {
                        autorF += ", & ";
                    }
                }

            }
            result = autorF;
        }
        return result;
    }

    private static String logoEntidad(java.lang.String arg0, java.lang.String arg1) {
        dda.silabo.sw.SilaboSW_Service service = new dda.silabo.sw.SilaboSW_Service();
        dda.silabo.sw.SilaboSW port = service.getSilaboSWPort();
        return port.logoEntidad(arg0, arg1);
    }

    private PdfPTable tablaDatosGenerales(DatosGenerales datosG) {

        PdfPTable table = new PdfPTable(3);
        table.setWidthPercentage(100f);
        table.addCell(new Paragraph("FACULTAD ", obtenerfuentePDF("tituloTabla")));
        PdfPCell facultadcell = new PdfPCell(new Paragraph(datosG.getNombre_facultad()));
        facultadcell.setColspan(2);
        table.addCell(facultadcell);
        table.addCell(new Paragraph("ESCUELA ", obtenerfuentePDF("tituloTabla")));
        PdfPCell escuelacell = new PdfPCell(new Paragraph(datosG.getNombre_escuela()));
        escuelacell.setColspan(2);
        table.addCell(escuelacell);
        table.addCell(new Paragraph("CARRERA ", obtenerfuentePDF("tituloTabla")));
        PdfPCell carreracell = new PdfPCell(new Paragraph(datosG.getNombre_carrera()));
        carreracell.setColspan(2);
        table.addCell(carreracell);
        table.addCell(new Paragraph("SEDE ", obtenerfuentePDF("tituloTabla")));
        PdfPCell sedecell = new PdfPCell(new Paragraph(datosG.getNombre_sede()));
        sedecell.setColspan(2);
        table.addCell(sedecell);
        table.addCell(new Paragraph("MODALIDAD ", obtenerfuentePDF("tituloTabla")));
        PdfPCell modalidadcell = new PdfPCell(new Paragraph(datosG.getModalidad()));
        modalidadcell.setColspan(2);
        table.addCell(modalidadcell);
        table.addCell(new Paragraph("ASIGNATURA ", obtenerfuentePDF("tituloTabla")));
        PdfPCell silabocell = new PdfPCell(new Paragraph(datosG.getSilabo_materia()));
        silabocell.setColspan(2);
        table.addCell(silabocell);
        table.addCell(new Paragraph("NIVEL", obtenerfuentePDF("tituloTabla")));
        PdfPCell nivelcell = new PdfPCell(new Paragraph(datosG.getNivel()));
        nivelcell.setColspan(2);
        table.addCell(nivelcell);
        table.addCell(new Paragraph("PERÍODO ACADÉMICO ", obtenerfuentePDF("tituloTabla")));
        PdfPCell periodocell = new PdfPCell(new Paragraph(datosG.getPeriodo_academico()));
        periodocell.setColspan(2);
        table.addCell(periodocell);

        PdfPCell informacion = new PdfPCell(new Paragraph("CAMPO DE FORMACIÓN ", obtenerfuentePDF("tituloTabla")));
        informacion.setVerticalAlignment(Element.ALIGN_CENTER);
        informacion.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(informacion);

        informacion = new PdfPCell(new Paragraph("CÓDIGO ", obtenerfuentePDF("tituloTabla")));
        informacion.setVerticalAlignment(Element.ALIGN_CENTER);
        informacion.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(informacion);

        informacion = new PdfPCell(new Paragraph("TOTAL HORAS", obtenerfuentePDF("tituloTabla")));
        informacion.setVerticalAlignment(Element.ALIGN_CENTER);
        informacion.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(informacion);

        informacion = new PdfPCell(new Paragraph(datosG.getCampo()));
        informacion.setVerticalAlignment(Element.ALIGN_CENTER);
        informacion.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(informacion);

        informacion = new PdfPCell(new Paragraph(datosG.getCodigo_asignatura()));
        informacion.setVerticalAlignment(Element.ALIGN_CENTER);
        informacion.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(informacion);
        Double d = datosG.getHoras_semanales() * datosG.getNumero_creditos();
        Integer horas = d.intValue();
        Long horasC = Math.round(datosG.getNumero_creditos());
        informacion = new PdfPCell(new Paragraph(horasC.toString()));
        informacion.setVerticalAlignment(Element.ALIGN_CENTER);
        informacion.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(informacion);

        informacion = new PdfPCell(new Paragraph("NÚMERO DE  HORAS  SEMANAL", obtenerfuentePDF("tituloTabla")));
        informacion.setVerticalAlignment(Element.ALIGN_CENTER);
        informacion.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(informacion);
        informacion = new PdfPCell(new Paragraph("PRERREQUISITOS ", obtenerfuentePDF("tituloTabla")));
        informacion.setVerticalAlignment(Element.ALIGN_CENTER);
        informacion.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(informacion);
        informacion = new PdfPCell(new Paragraph("CORREQUISITOS ", obtenerfuentePDF("tituloTabla")));
        informacion.setVerticalAlignment(Element.ALIGN_CENTER);
        informacion.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(informacion);

        informacion = new PdfPCell(new Paragraph(datosG.getHoras_semanales().toString()));
        informacion.setVerticalAlignment(Element.ALIGN_CENTER);
        informacion.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(informacion);
        informacion = new PdfPCell(new Paragraph(datosG.getPrerequisitos()));
        informacion.setVerticalAlignment(Element.ALIGN_CENTER);
        informacion.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(informacion);
        informacion = new PdfPCell(new Paragraph(datosG.getCorrequisitos()));
        informacion.setVerticalAlignment(Element.ALIGN_CENTER);
        informacion.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(informacion);
        return table;
    }

    private Element tablaEstructuraDesarrollo(int und, int IdSilabo, String jsonAsignaturaInfo) throws ScriptException, NoSuchMethodException {
        Font zapfdibats = new Font(Font.FontFamily.ZAPFDINGBATS, 6);
        Chunk bullet1 = new Chunk(String.valueOf((char) 108), zapfdibats);
        Gson G = new Gson();
        Silabo silaboestrategias = new Silabo();
        silaboestrategias.setIdSilabo(IdSilabo);
        silaboestrategias.setIdUnidad((und + 1));
        silaboestrategias.setTipo("Estrategias");
        silaboestrategias.setRol("Doc");
        String jsonEstrategias = estrategiasCargar(G.toJson(silaboestrategias));
        EstrategiasMetodologicasIU estrategias = G.fromJson(jsonEstrategias, EstrategiasMetodologicasIU.class);
        Paragraph estrategiaSilabo = new Paragraph();
        PdfPCell estrategiacell = new PdfPCell();
        if (estrategias.getNivel1().size() > 0) {
            for (Estrategia nivel1 : estrategias.getNivel1()) {
                estrategiaSilabo.add(new Phrase(nivel1.getNombre() + "\n", obtenerfuentePDF("contenidoTablaTitulo")));
                for (Estrategia nivel2 : nivel1.getNivel2()) {
                    for (Estrategia estrategia : nivel2.getNivel3()) {
                        if (estrategia.getChv_check() != null) {
                            estrategiaSilabo.add(bullet1);
                            estrategiaSilabo.add(new Phrase("   " + estrategia.getNombre() + "\n", obtenerfuentePDF("contenidoTabla")));
                        }
                    }
                }
            }
            estrategiacell.addElement(estrategiaSilabo);
        }

/////////////////////////////////////////Recursos//////////////////////////////
        Silabo silaborecursos = new Silabo();
        silaborecursos.setIdSilabo(IdSilabo);
        silaborecursos.setIdUnidad(und + 1);
        silaborecursos.setTipo("Recursos");
        silaborecursos.setRol("Doc");
        String jsonRecursos = recursosCargar(G.toJson(silaborecursos));
        Recursos recursos = G.fromJson(jsonRecursos, Recursos.class);
        Paragraph recursoSilabo = new Paragraph();
        PdfPCell recursocell = new PdfPCell();
        if (recursos.getRecursos().size() > 0) {
            recursos.getRecursos().stream().filter((recurso) -> (recurso.getChv_check() != null)).forEachOrdered((recurso) -> {
//                recursoSilabo.add(bullet1);
                recursoSilabo.add(new Phrase(recurso.getStrDescripcion() + "\n", obtenerfuentePDF("contenidoTabla")));
            });
            recursocell.addElement(recursoSilabo);
        }
////////////////////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////ACTIVIDADES DE APRENDIZAJE//////////////////////////////
        Silabo silaboactividades = new Silabo();
        silaboactividades.setIdSilabo(IdSilabo);
        silaboactividades.setIdUnidad(und + 1);
        silaboactividades.setTipo("Aula");
        silaboactividades.setRol("Doc");
//                ActividadesLN actividadesln = new ActividadesLN();
        String jsonActividadesAula = actividadesAprendizajeCargar(G.toJson(silaboactividades));
        Actividades actividades = G.fromJson(jsonActividadesAula, Actividades.class);
        Phrase actividadAula = new Phrase();
        PdfPCell aulacell = new PdfPCell();
        if (actividades.getActividades().size() > 0) {
            for (Actividad principal : actividades.getActividades()) {
                actividadAula.add(new Phrase(principal.getDescripcion() + "\n", obtenerfuentePDF("contenidoTablaTitulo")));
                for (Actividad nivel2 : principal.getNivel2()) {
                    if (nivel2.getChv_check() != null) {
                        actividadAula.add(bullet1);
                        actividadAula.add(new Phrase("   " + nivel2.getDescripcion() + "\n", obtenerfuentePDF("contenidoTabla")));
                    }
                }
            }
            aulacell.addElement(actividadAula);
        }

        silaboactividades.setTipo("Autonomas");
        String jsonActividadesAutonomas = actividadesAprendizajeCargar(G.toJson(silaboactividades));
        actividades = G.fromJson(jsonActividadesAutonomas, Actividades.class);
        Paragraph actividadAutonoma = new Paragraph();
        PdfPCell autonomacell = new PdfPCell();
        if (actividades.getActividades().size() > 0) {
            for (Actividad actividad : actividades.getActividades()) {
                if (actividad.getChv_check() != null) {
                    actividadAutonoma.add(bullet1);
                    actividadAutonoma.add(new Phrase("   " + actividad.getDescripcion() + "\n", obtenerfuentePDF("contenidoTabla")));
                }
            }
            autonomacell.addElement(actividadAutonoma);
        }
////////////////////////////////////////////////////////////////////////////////////////////////            
        Silabo silaboasignatura = G.fromJson(jsonAsignaturaInfo, Silabo.class);
        silaboasignatura.setIdUnidad((und + 1));
        silaboasignatura.setIdSilabo(IdSilabo);
        silaboasignatura.setRol("Doc");
//                EstructuraDesarrolloLN estructuraDln = new EstructuraDesarrolloLN();
        String jsonInformacionUnidad = unidadInformacionCargar(G.toJson(silaboasignatura));
        InformacionUnidadIU estructuradesarrollo = G.fromJson(jsonInformacionUnidad, InformacionUnidadIU.class);
        Unidades unidad = estructuradesarrollo.getUnidad().get(0);
///////////////////////////////////////////TEMAS SUBTEMAS//////////////////////////////////////
//
        Paragraph temasSubtemas = new Paragraph();
        PdfPCell temaScell = new PdfPCell();
        if (unidad != null) {
            for (Temas tema : unidad.getTemas()) {
//                temasSubtemas.add(bullet1);
                temasSubtemas.add(new Phrase(tema.getDescripcion() + "\n", obtenerfuentePDF("contenidoTabla")));
                for (Subtemas subtemas : tema.getSubtemas()) {
                    temasSubtemas.add("  ");
                    temasSubtemas.add(bullet1);
                    temasSubtemas.add(new Phrase("   " + subtemas.getDescripcion() + "\n", obtenerfuentePDF("contenidoTabla")));
                }
            }
            temaScell.addElement(temasSubtemas);
        }
////////////////////////////////////////LOGROS////////////////////////////////////////////////////                
        Silabo silabologros = new Silabo();
        silabologros.setIdSilabo(IdSilabo);
        silabologros.setIdUnidad(und + 1);
        silabologros.setTipo("Logros");
        silabologros.setRol("Doc");
        String jsonlogros = logroCargar(G.toJson(silabologros));
        LogrosIU logro = G.fromJson(jsonlogros, LogrosIU.class);
        Paragraph logrounidadT = new Paragraph("LOGROS DE APRENDIZAJE: ", obtenerfuentePDF("tituloTabla"));
        String logroUnidad = "";
        Paragraph logroSilabo = new Paragraph();
        for (Logro l : logro.getLogros()) {
            logroSilabo.add(bullet1);
            logroSilabo.add(new Phrase(" " + l.getDescripcion() + "\n", obtenerfuentePDF("contenidoTabla")));
//            logroUnidad = l.getDescripcion() + "\n";
        }
        Paragraph logrodesc = new Paragraph();
        if (logroUnidad == null) {
            logroUnidad = "";
        }

        logrodesc.add(logroSilabo);
//////////////////////////////////////////OBJETIVOS////////////////////////////////////////////////////   
        ScriptEngineManager management = new ScriptEngineManager();
        ScriptEngine enginee = management.getEngineByName("javascript");
        String scriptobjetivo = (String) "function unescapeTextoobjetivo(texto) {return unescape(texto);}";
        enginee.eval(scriptobjetivo);

        Invocable invo = (Invocable) enginee;
        
        Silabo silabobjetivo = new Silabo();
        silabobjetivo.setIdSilabo(IdSilabo);
        silabobjetivo.setIdUnidad(und + 1);
        silabobjetivo.setTipo("Objetivos");
        silabobjetivo.setRol("Doc");
        String jsonObjetivos = objetivoCargar(G.toJson(silabobjetivo));
        ObjetivosIU objetivo = G.fromJson(jsonObjetivos, ObjetivosIU.class);
        String objetivoUnidad = "";
        for (Objetivo o : objetivo.getObjetivos()) {
            objetivoUnidad += o.getDescripcion() + "\n";
        }
        Paragraph objetivounidadT = new Paragraph();
        objetivounidadT.add(new Phrase("OBJETIVO DE LA UNIDAD: ", obtenerfuentePDF("tituloTabla")));
        Paragraph objetivodesp = new Paragraph();
        if (objetivoUnidad == null) {
            objetivoUnidad = "";
        }
        Object objec = invo.invokeFunction("unescapeTextoobjetivo", objetivoUnidad);
        objetivoUnidad = (String) objec;
        objetivounidadT.add(new Phrase(objetivoUnidad, obtenerfuentePDF("contenidoTabla")));

////////////////////////////////////////////////////////////////////////////////////////////////
        PdfPTable tableEst = new PdfPTable(5);
        tableEst.setWidthPercentage(100f);
        tableEst.addCell(new Paragraph("Unidad N° " + (und + 1) + "\n" + "Título de la Unidad: " + unidad.getTitulo(), obtenerfuentePDF("contenidoTabla")));
        PdfPCell objetivocell = new PdfPCell();
        objetivocell.addElement(objetivounidadT);
        objetivocell.setColspan(4);
        tableEst.addCell(objetivocell);
        PdfPCell temas = new PdfPCell(new Paragraph("TEMAS Y SUBTEMAS", obtenerfuentePDF("tituloTabla")));
        temas.setRowspan(3);
        temas.setVerticalAlignment(Element.ALIGN_MIDDLE);
        temas.setHorizontalAlignment(Element.ALIGN_CENTER);
        tableEst.addCell(temas);
        PdfPCell estrategias2 = new PdfPCell(new Paragraph("ESTRATEGIAS METODOLÓGICAS", obtenerfuentePDF("tituloTabla")));
        estrategias2.setRowspan(3);
        estrategias2.setVerticalAlignment(Element.ALIGN_MIDDLE);
        estrategias2.setHorizontalAlignment(Element.ALIGN_CENTER);
        tableEst.addCell(estrategias2);
        PdfPCell recursos2 = new PdfPCell(new Paragraph("RECURSOS", obtenerfuentePDF("tituloTabla")));
        recursos2.setRowspan(3);
        recursos2.setVerticalAlignment(Element.ALIGN_MIDDLE);
        recursos2.setHorizontalAlignment(Element.ALIGN_CENTER);
        tableEst.addCell(recursos2);
        PdfPCell tituloActividad = new PdfPCell(new Paragraph("ACTIVIDADES DE APRENDIZAJE", obtenerfuentePDF("tituloTabla")));
        tituloActividad.setRowspan(2);
        tituloActividad.setColspan(2);
        tituloActividad.setVerticalAlignment(Element.ALIGN_MIDDLE);
        tituloActividad.setHorizontalAlignment(Element.ALIGN_CENTER);
        PdfPCell tituloActAula = new PdfPCell(new Paragraph("En el Aula", obtenerfuentePDF("tituloTabla")));
        //tituloActAula.setVerticalAlignment(Element.ALIGN_MIDDLE);
        tituloActAula.setHorizontalAlignment(Element.ALIGN_CENTER);
        PdfPCell tituloActAutonomas = new PdfPCell(new Paragraph("Autónomas", obtenerfuentePDF("tituloTabla")));
        tituloActAutonomas.setVerticalAlignment(Element.ALIGN_MIDDLE);
        tituloActAutonomas.setHorizontalAlignment(Element.ALIGN_CENTER);
        tableEst.addCell(tituloActividad);
        tableEst.addCell(tituloActAula);
        tableEst.addCell(tituloActAutonomas);
        temaScell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        temaScell.setHorizontalAlignment(Element.ALIGN_CENTER);
        tableEst.addCell(temaScell);
        estrategiacell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        estrategiacell.setHorizontalAlignment(Element.ALIGN_CENTER);
        tableEst.addCell(estrategiacell);
        recursocell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        recursocell.setHorizontalAlignment(Element.ALIGN_CENTER);
        tableEst.addCell(recursocell);
        aulacell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        aulacell.setHorizontalAlignment(Element.ALIGN_CENTER);
        tableEst.addCell(aulacell);
        autonomacell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        autonomacell.setHorizontalAlignment(Element.ALIGN_CENTER);
        tableEst.addCell(autonomacell);
        PdfPCell logroscell = new PdfPCell();
        logroscell.addElement(logrounidadT);
        logroscell.addElement(logrodesc);
        logroscell.setColspan(5);
        tableEst.addCell(logroscell);
        return tableEst;
    }

    private Element tablaEscenariosAprendizaje(Integer IdSilabo) {
        Font zapfdibats = new Font(Font.FontFamily.ZAPFDINGBATS, 6);
        Chunk bullet1 = new Chunk(String.valueOf((char) 108), zapfdibats);
        Gson G = new Gson();
        Silabo silaboreal = new Silabo();
        silaboreal.setIdSilabo(IdSilabo);
        silaboreal.setTipo("Real");
        silaboreal.setRol("Doc");
        Silabo silabovirtual = new Silabo();
        silabovirtual.setIdSilabo(IdSilabo);
        silabovirtual.setTipo("Virtual");
        silabovirtual.setRol("Doc");
        Silabo silaboaulico = new Silabo();
        silaboaulico.setIdSilabo(IdSilabo);
        silaboaulico.setTipo("Aulico");
        silaboaulico.setRol("Doc");
        String strEscenariosReal = escenariosCargar(G.toJson(silaboreal));
        String strEscenariosVirtual = escenariosCargar(G.toJson(silabovirtual));
        String strEscenariosAulico = escenariosCargar(G.toJson(silaboaulico));
        EscenariosIU reales, aulicos, virtuales;
        reales = G.fromJson(strEscenariosReal, EscenariosIU.class);
        aulicos = G.fromJson(strEscenariosAulico, EscenariosIU.class);
        virtuales = G.fromJson(strEscenariosVirtual, EscenariosIU.class);
        PdfPTable tableEsc = new PdfPTable(3);
        tableEsc.setWidthPercentage(100f);
        PdfPCell cellreales = new PdfPCell(new Paragraph("REALES ", obtenerfuentePDF("tituloTabla")));
        cellreales.setVerticalAlignment(Element.ALIGN_MIDDLE);
        cellreales.setHorizontalAlignment(Element.ALIGN_CENTER);
        PdfPCell cellvirtuales = new PdfPCell(new Paragraph("    VIRTUALES ", obtenerfuentePDF("tituloTabla")));
        cellvirtuales.setVerticalAlignment(Element.ALIGN_MIDDLE);
        cellvirtuales.setHorizontalAlignment(Element.ALIGN_CENTER);
        PdfPCell cellaulicos = new PdfPCell(new Paragraph("    AÚLICO ", obtenerfuentePDF("tituloTabla")));
        cellaulicos.setVerticalAlignment(Element.ALIGN_MIDDLE);
        cellaulicos.setHorizontalAlignment(Element.ALIGN_CENTER);
        tableEsc.addCell(cellreales);
        tableEsc.addCell(cellvirtuales);
        tableEsc.addCell(cellaulicos);

        int r = 0, v = 0, a = 0;
        while (r < reales.getEscenarios().size() || a < aulicos.getEscenarios().size() || v < virtuales.getEscenarios().size()) {
            if (r < reales.getEscenarios().size()) {
                if (reales.getEscenarios().get(r).getCheck() != null) {
                    Paragraph p = new Paragraph();
                    p.add(bullet1);
                    p.add(new Phrase(" " + reales.getEscenarios().get(r).getDescripcion(), obtenerfuentePDF("contenidoTabla")));
                    PdfPCell realcell = new PdfPCell();
                    realcell.setVerticalAlignment(Element.ALIGN_CENTER);
                    realcell.addElement(p);
                    tableEsc.addCell(realcell);
                }
            } else {
                tableEsc.addCell(new Paragraph("", obtenerfuentePDF("contenidoTabla")));
            }
            if (v < virtuales.getEscenarios().size()) {
                if (virtuales.getEscenarios().get(v).getCheck() != null) {
                    Paragraph p1 = new Paragraph();
                    p1.add(bullet1);
                    p1.add(new Phrase(" " + virtuales.getEscenarios().get(v).getDescripcion(), obtenerfuentePDF("contenidoTabla")));
                    PdfPCell virtualcell = new PdfPCell();
                    virtualcell.setVerticalAlignment(Element.ALIGN_CENTER);
                    virtualcell.addElement(p1);
                    tableEsc.addCell(virtualcell);
                }
            } else {
                tableEsc.addCell(new Paragraph("", obtenerfuentePDF("contenidoTabla")));
            }
            if (a < aulicos.getEscenarios().size()) {
                if (aulicos.getEscenarios().get(a).getCheck() != null) {
                    Paragraph p2 = new Paragraph();
                    p2.add(bullet1);
                    p2.add(new Phrase(" " + aulicos.getEscenarios().get(a).getDescripcion(), obtenerfuentePDF("contenidoTabla")));
                    PdfPCell aulicocell = new PdfPCell();
                    aulicocell.setVerticalAlignment(Element.ALIGN_CENTER);
                    aulicocell.addElement(p2);
                    tableEsc.addCell(aulicocell);
                }
            } else {
                tableEsc.addCell(new Paragraph("", obtenerfuentePDF("contenidoTabla")));
            }
            r++;
            v++;
            a++;
        }
        return tableEsc;
    }

    private PdfPTable tablaCriteriosEvaluacion(Integer IdSilabo) {
        PdfPTable tcriterios = new PdfPTable(1);
        PdfPTable tableCriteriosN = new PdfPTable(6);
        try {

            tcriterios.setWidthPercentage(100f);

            tableCriteriosN.setWidthPercentage(100f);
            float[] tableCriterios = {24f, 12f, 13f, 13f, 17f, 21f};
            tableCriteriosN.setWidths(tableCriterios);
            Gson G = new Gson();
            Silabo silaboevaluaciones = new Silabo();
            silaboevaluaciones.setIdSilabo(IdSilabo);
            silaboevaluaciones.setTipo("Criterios");
            silaboevaluaciones.setRol("Doc");
            String jsonEvaluaciones = evaluacionesCargar(G.toJson(silaboevaluaciones));
            CriteriosEvaluacionesIU evaluaciones = G.fromJson(jsonEvaluaciones, CriteriosEvaluacionesIU.class);
            if (!evaluaciones.getActividadesevaluar().isEmpty()) {
                List<ActividadEvaluar> actividadesevaluar = evaluaciones.getActividadesevaluar();
                List<Aporte> aportesmenu = actividadesevaluar.get(0).getAportes();
                tableCriteriosN.addCell(new Paragraph("ACTIVIDADES" + "\n" + "A EVALUAR", obtenerfuentePDF("tituloTabla")));

                for (int ap = 0; ap < aportesmenu.size(); ap++) {
                    if (aportesmenu.get(ap).getDescripcion().equals("REMEDIAL")) {
                        aportesmenu.get(ap).setDescripcion("RECUPERACIÓN");
                    }
                    PdfPCell aportes = new PdfPCell(new Paragraph(aportesmenu.get(ap).getDescripcion(), obtenerfuentePDF("tituloTabla")));
                    aportes.setVerticalAlignment(Element.ALIGN_CENTER);
                    aportes.setHorizontalAlignment(Element.ALIGN_CENTER);
                    tableCriteriosN.addCell(aportes);
                }
                for (int ae = 0; ae < actividadesevaluar.size(); ae++) {
                    List<Aporte> aportes = actividadesevaluar.get(ae).getAportes();
                    if (ae == 0) {
                        tableCriteriosN.addCell(new Paragraph(actividadesevaluar.get(ae).getDescripcion(), obtenerfuentePDF("contenidoTabla")));
                        tableCriteriosN.addCell(new Paragraph("", obtenerfuentePDF("contenidoTabla")));
                        tableCriteriosN.addCell(new Paragraph("", obtenerfuentePDF("contenidoTabla")));
                        tableCriteriosN.addCell(new Paragraph("", obtenerfuentePDF("contenidoTabla")));
                        PdfPCell TotalP1 = new PdfPCell(new Paragraph("12", obtenerfuentePDF("contenidoTabla")));
                        TotalP1.setVerticalAlignment(Element.ALIGN_CENTER);
                        TotalP1.setHorizontalAlignment(Element.ALIGN_CENTER);
                        tableCriteriosN.addCell(TotalP1);
                        TotalP1 = new PdfPCell(new Paragraph("20", obtenerfuentePDF("contenidoTabla")));
                        TotalP1.setVerticalAlignment(Element.ALIGN_CENTER);
                        TotalP1.setHorizontalAlignment(Element.ALIGN_CENTER);
                        tableCriteriosN.addCell(TotalP1);
                    } else {
                        for (int j = 0; j < aportes.size(); j++) {
                            if (j == 0) {
                                tableCriteriosN.addCell(new Paragraph(actividadesevaluar.get(ae).getDescripcion(), obtenerfuentePDF("contenidoTabla")));
                                Integer nota2 = aportes.get(j).getNota().getNota();
                                String contenidoNota = nota2.toString();
                                if (nota2 == 0) {
                                    contenidoNota = "";
                                }
                                PdfPCell nota = new PdfPCell(new Paragraph(contenidoNota, obtenerfuentePDF("contenidoTabla")));
                                nota.setVerticalAlignment(Element.ALIGN_CENTER);
                                nota.setHorizontalAlignment(Element.ALIGN_CENTER);
                                tableCriteriosN.addCell(nota);
                            } else {
                                Integer nota2 = aportes.get(j).getNota().getNota();
                                String contenidoNota = nota2.toString();
                                if (nota2 == 0) {
                                    contenidoNota = "";
                                }
                                PdfPCell nota = new PdfPCell((new Paragraph(contenidoNota, obtenerfuentePDF("contenidoTabla"))));
                                nota.setVerticalAlignment(Element.ALIGN_CENTER);
                                nota.setHorizontalAlignment(Element.ALIGN_CENTER);
                                tableCriteriosN.addCell(nota);

                            }
                        }
                    }
                }
                PdfPCell totalCriterios = new PdfPCell(new Paragraph("TOTAL", obtenerfuentePDF("tituloTabla")));
                totalCriterios.setVerticalAlignment(Element.ALIGN_CENTER);
                totalCriterios.setHorizontalAlignment(Element.ALIGN_CENTER);
                tableCriteriosN.addCell(totalCriterios);
                PdfPCell TotalP1 = new PdfPCell((new Paragraph(aportesmenu.get(0).getNotaTotal() + " PUNTOS", obtenerfuentePDF("tituloTabla"))));
                TotalP1.setVerticalAlignment(Element.ALIGN_CENTER);
                TotalP1.setHorizontalAlignment(Element.ALIGN_CENTER);
                tableCriteriosN.addCell(TotalP1);
                TotalP1 = new PdfPCell((new Paragraph(aportesmenu.get(1).getNotaTotal() + " PUNTOS", obtenerfuentePDF("tituloTabla"))));
                TotalP1.setVerticalAlignment(Element.ALIGN_CENTER);
                TotalP1.setHorizontalAlignment(Element.ALIGN_CENTER);
                tableCriteriosN.addCell(TotalP1);
                TotalP1 = new PdfPCell((new Paragraph(aportesmenu.get(2).getNotaTotal() + " PUNTOS", obtenerfuentePDF("tituloTabla"))));
                TotalP1.setVerticalAlignment(Element.ALIGN_CENTER);
                TotalP1.setHorizontalAlignment(Element.ALIGN_CENTER);
                tableCriteriosN.addCell(TotalP1);
                TotalP1 = new PdfPCell(new Paragraph("12 PUNTOS", obtenerfuentePDF("tituloTabla")));
                TotalP1.setVerticalAlignment(Element.ALIGN_CENTER);
                TotalP1.setHorizontalAlignment(Element.ALIGN_CENTER);
                tableCriteriosN.addCell(TotalP1);
                TotalP1 = new PdfPCell(new Paragraph("20 PUNTOS", obtenerfuentePDF("tituloTabla")));
                TotalP1.setVerticalAlignment(Element.ALIGN_CENTER);
                TotalP1.setHorizontalAlignment(Element.ALIGN_CENTER);
                tableCriteriosN.addCell(TotalP1);

                PdfPCell pCell = new PdfPCell();
                pCell.setBorder(0);
                pCell.addElement(tableCriteriosN);
                tcriterios.addCell(pCell);
//
            } else {
                PdfPCell pCell = new PdfPCell();
                pCell.setBorder(0);
                pCell.addElement(new Paragraph(""));
                tcriterios.addCell(pCell);
            }
        } catch (DocumentException ex) {
            Logger.getLogger(SilaboVigente.class.getName()).log(Level.SEVERE, null, ex);
        }
        return tcriterios;
    }

    private Element tablaBibliografia(Integer IdSilabo) throws NoSuchMethodException {
        ScriptEngineManager manager = new ScriptEngineManager();
        PdfPTable tbibliografia = new PdfPTable(1);
        try {
            ScriptEngine engine = manager.getEngineByName("javascript");
            String script1 = (String) "function unescapeTexto(texto) {return unescape(texto);}";
            engine.eval(script1);

            Invocable invocar = (Invocable) engine;
            Gson G = new Gson();
            Font zapfdibats = new Font(Font.FontFamily.ZAPFDINGBATS, 6);
            Chunk bullet1 = new Chunk(String.valueOf((char) 108), zapfdibats);

            tbibliografia.setWidthPercentage(100f);
            PdfPCell celdabibliografia = new PdfPCell();
            Silabo silabobibliografia = new Silabo();
            silabobibliografia.setIdSilabo(IdSilabo);
            silabobibliografia.setTipo("Bibliografias");
            silabobibliografia.setRol("Doc");
            String jsonBibliografia = bibliografiasCargar(G.toJson(silabobibliografia));
            BibliografiasIU bibliografias = G.fromJson(jsonBibliografia, BibliografiasIU.class);
            Paragraph basicasilabo = new Paragraph();
            Paragraph complementariasilabo = new Paragraph();
            PdfPCell basicacell = new PdfPCell();
            PdfPCell complementariacell = new PdfPCell();
            for (BibliografiaLibro bl : bibliografias.getBasica().getLibros()) {
//                basicasilabo.add(bullet1);
                String Bbasica = bibliografiasAPAlibro(bl);
                Object object = invocar.invokeFunction("unescapeTexto", Bbasica);
                Bbasica = (String) object;
                basicasilabo.add(new Phrase("   " + Bbasica + "\n", obtenerfuentePDF("contenidoTabla")));

            }
            for (BibliografiaSitioWeb bs : bibliografias.getBasica().getSitios()) {
//                basicasilabo.add(bullet1);
                String Bbasica = bibliografiasAPASitio(bs);
                Object object = invocar.invokeFunction("unescapeTexto", Bbasica);
                Bbasica = (String) object;
                basicasilabo.add(new Phrase("   " + Bbasica + "\n", obtenerfuentePDF("contenidoTabla")));

            }
            for (BibliografiaLibro bl : bibliografias.getComplementaria().getLibros()) {

                String Bcomplementaria = bibliografiasAPAlibro(bl);
                Object object = invocar.invokeFunction("unescapeTexto", Bcomplementaria);
                Bcomplementaria = (String) object;
//                complementariasilabo.add(bullet1);
                complementariasilabo.add(new Phrase("   " + Bcomplementaria + "\n", obtenerfuentePDF("contenidoTabla")));
            }
            for (BibliografiaSitioWeb bs : bibliografias.getComplementaria().getSitios()) {

                String Bcomplementaria = bibliografiasAPASitio(bs);
                Object object = invocar.invokeFunction("unescapeTexto", Bcomplementaria);
                Bcomplementaria = (String) object;
//                complementariasilabo.add(bullet1);
                complementariasilabo.add(new Phrase("   " + Bcomplementaria + "\n", obtenerfuentePDF("contenidoTabla")));
            }
            complementariacell.addElement(complementariasilabo);
            basicacell.addElement(basicasilabo);
            PdfPTable tableBibliografiaB = new PdfPTable(1);
            tableBibliografiaB.setWidthPercentage(100f);
            tbibliografia.addCell(new Paragraph("  BÁSICA", obtenerfuentePDF("tituloTabla")));
            tbibliografia.addCell(basicacell);
//            doc.add(tableBibliografiaB);

            PdfPTable tableBibliografiaC = new PdfPTable(1);
            tableBibliografiaC.setWidthPercentage(100f);
            tbibliografia.addCell(new Paragraph("  COMPLEMENTARIA", obtenerfuentePDF("tituloTabla")));
            tbibliografia.addCell(complementariacell);

            celdabibliografia.addElement(tableBibliografiaB);
            celdabibliografia.addElement(tableBibliografiaC);
//            tbibliografia.addCell(celdabibliografia);

        } catch (ScriptException ex) {
            Logger.getLogger(SilaboVigente.class.getName()).log(Level.SEVERE, null, ex);
        }
        return tbibliografia;
    }

    private Element tablaInformacionDocentes(DatosDocentesIU docentes, DatosDocentesIU docentesTotal) {
        PdfPTable tdatosdocente = new PdfPTable(1);

        tdatosdocente.setWidthPercentage(100f);

        if (docentes != null) {
            List<DatoDocente> totalDocentes = docentesTotal.IngenierosNoAutenticados(docentes.getDatosdocentes());

            for (DatoDocente Docente : totalDocentes) {
                PdfPTable tblPerfilProfe = new PdfPTable(2);
                tblPerfilProfe.setWidthPercentage(100f);
                String tercerNivel = "";
                for (Titulos titulos : Docente.getTercerNivel()) {
                    if (titulos.getSelected().equals("selected") || titulos.getSelected().equals("agregado")) {
                        tercerNivel += titulos.getDescripcion() + "\n";
                    }
                }
                String cuartoNivel = "";
                for (Titulos titulos : Docente.getCuartoNivel()) {
                    if (titulos.getSelected().equals("selected") || titulos.getSelected().equals("agregado")) {
                        cuartoNivel += titulos.getDescripcion() + "\n";
                    }
                }
                Font fuente = new Font();
                fuente.setSize(11);
                fuente.setColor(59, 131, 189);
                tblPerfilProfe.addCell(new Paragraph("NOMBRE DEL PROFESOR ", obtenerfuentePDF("tituloTabla")));
                tblPerfilProfe.addCell(new Paragraph(Docente.getNombres() + " " + Docente.getApellidos(), obtenerfuentePDF("contenidoTabla")));
                tblPerfilProfe.addCell(new Paragraph("NÚMERO TELEFÓNICO ", obtenerfuentePDF("tituloTabla")));
                tblPerfilProfe.addCell(new Paragraph(Docente.getTelefono(), obtenerfuentePDF("contenidoTabla")));
                tblPerfilProfe.addCell(new Paragraph("CORREO ELECTRÓNICO ", obtenerfuentePDF("tituloTabla")));
                tblPerfilProfe.addCell(new Paragraph(Docente.getCorreo(), fuente));
                tblPerfilProfe.addCell(new Paragraph("TÍTULOS ACADÉMICOS DE TERCER NIVEL ", obtenerfuentePDF("tituloTabla")));
                tblPerfilProfe.addCell(new Paragraph(tercerNivel, obtenerfuentePDF("contenidoTabla")));
                tblPerfilProfe.addCell(new Paragraph("TÍTULOS ACADÉMICOS DE POSGRADO ", obtenerfuentePDF("tituloTabla")));
                tblPerfilProfe.addCell(new Paragraph(cuartoNivel, obtenerfuentePDF("contenidoTabla")));
                PdfPCell pCell = new PdfPCell();
                pCell.setBorder(0);
                pCell.addElement(tblPerfilProfe);
                tdatosdocente.addCell(pCell);
                pCell = new PdfPCell();
                pCell.setBorder(0);
                pCell.addElement(new Paragraph("\n"));

            }
        }
        return tdatosdocente;
    }

    private Element tablaFirmaResponsables(DatosDocentesIU docentes, String codigoCampo, Silabo silabo) {
        PdfPTable tblFirmas = new PdfPTable(2);
        tblFirmas.setWidthPercentage(100f);
        for (DatoDocente datoDocente : docentes.getDatosdocentes()) {
            String nombreDocente = datoDocente.getNombres();
            nombreDocente = nombreDocente.substring(0, nombreDocente.indexOf(" "));
            String apellidoDocente = datoDocente.getApellidos();
            apellidoDocente = apellidoDocente.substring(0, apellidoDocente.indexOf(" "));
            nombreDocente = "\n\n\n\n\n\n\nING. " + nombreDocente + " " + apellidoDocente + "\n";
            Paragraph pd = new Paragraph();
            pd.add(new Phrase(nombreDocente, obtenerfuentePDF("contenidoTabla")));
            pd.add(new Phrase("NOMBRE Y FIRMA DEL PROFESOR DE LA ASIGNATURA", obtenerfuentePDF("contenidoTablaTitulo")));
            PdfPTable tblDatosFirmas = new PdfPTable(1);
            PdfPCell cell11 = new PdfPCell(pd);
            cell11.setVerticalAlignment(Element.ALIGN_CENTER);
            cell11.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell11.setBorder(0);
            tblDatosFirmas.addCell(cell11);
            PdfPCell celdaDocentes = new PdfPCell(tblDatosFirmas);
            celdaDocentes.setVerticalAlignment(Element.ALIGN_CENTER);
            celdaDocentes.setHorizontalAlignment(Element.ALIGN_CENTER);
            celdaDocentes.setBorder(0);
            tblFirmas.addCell(celdaDocentes);
        }
        silabo.setCampoFormacion(codigoCampo);
        String jsonAutoridades = autoridadesSilaboCargar(new Gson().toJson(silabo));
        DatosDocentesIU docentes2 = new Gson().fromJson(jsonAutoridades, DatosDocentesIU.class);
        for (DatoDocente datoDocente : docentes2.getDatosdocentes()) {
            String nombreDocente = datoDocente.getNombres();
            nombreDocente = nombreDocente.substring(0, nombreDocente.indexOf(" "));
            String apellidoDocente = datoDocente.getApellidos();
            apellidoDocente = apellidoDocente.substring(0, apellidoDocente.indexOf(" "));
            nombreDocente = "\n\n\n\n\n\n\nING. " + nombreDocente + " " + apellidoDocente + "\n";
            Phrase nombre = new Phrase("" + nombreDocente, obtenerfuentePDF("tituloTabla"));
            if (datoDocente.getRol().equals("FIRMA DEL DIRECTOR DE CARRERA")) {
                datoDocente.setRol("NOMBRE Y FIRMA DEL DIRECTOR DE CARRERA");
            } else {
                datoDocente.setRol("NOMBRE Y FIRMA DEL COORDINADOR DE CAMPO");
            }
            Paragraph pd = new Paragraph();
            pd.add(new Phrase(nombreDocente, obtenerfuentePDF("contenidoTabla")));
            pd.add(new Phrase(datoDocente.getRol(), obtenerfuentePDF("contenidoTablaTitulo")));
            PdfPTable tblDatosFirmas = new PdfPTable(1);
            PdfPCell cell11 = new PdfPCell(pd);
            cell11.setVerticalAlignment(Element.ALIGN_CENTER);
            cell11.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell11.setBorder(0);

            tblDatosFirmas.addCell(cell11);
            PdfPCell celdaDocentes = new PdfPCell(tblDatosFirmas);
            celdaDocentes.setVerticalAlignment(Element.ALIGN_CENTER);
            celdaDocentes.setHorizontalAlignment(Element.ALIGN_CENTER);

            celdaDocentes.setBorder(0);
            tblFirmas.addCell(celdaDocentes);
        }
        Integer size = docentes.getDatosdocentes().size() + docentes2.getDatosdocentes().size();
        if (size % 2 == 1) {
            PdfPCell celdaDocentes = new PdfPCell(new Paragraph("\n\n\n\n\n\n\n"));
            celdaDocentes.setVerticalAlignment(Element.ALIGN_CENTER);
            celdaDocentes.setHorizontalAlignment(Element.ALIGN_CENTER);
            celdaDocentes.setBorder(0);
            tblFirmas.addCell(celdaDocentes);
        }
        return tblFirmas;

    }

    private Element tablaParametrosSilabo() {
        String jsonParametro = parametroSilaboCargar(2);
        Parametro parametro = new Gson().fromJson(jsonParametro, Parametro.class);
        PdfPCell celdaParametro = new PdfPCell(new Paragraph(parametro.getDescripcion(), obtenerfuentePDF("tituloTabla")));
        celdaParametro.setVerticalAlignment(Element.ALIGN_CENTER);
        celdaParametro.setHorizontalAlignment(Element.ALIGN_CENTER);
        celdaParametro.setBorder(0);
        PdfPCell celdaValor = new PdfPCell(new Paragraph(parametro.getValor(), obtenerfuentePDF("contenidoTabla")));
        celdaValor.setVerticalAlignment(Element.ALIGN_CENTER);
        celdaValor.setBorder(0);
        PdfPTable tblFecha = new PdfPTable(2);
        tblFecha.setWidthPercentage(100f);
        tblFecha.addCell(celdaParametro);
        tblFecha.addCell(celdaValor);
        return tblFecha;
    }
}
